/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, NgZone, Output, Renderer2, ViewChild } from '@angular/core';
import Plyr from 'plyr';
import { BehaviorSubject, Observable } from 'rxjs';
import { filter, first, switchMap } from 'rxjs/operators';
import { DefaultPlyrDriver } from '../plyr-driver/default-plyr-driver';
/**
 * @record
 */
function PlyrSimpleChanges() { }
if (false) {
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrType;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrTitle;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrPoster;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrSources;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrTracks;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrOptions;
}
var PlyrComponent = /** @class */ (function () {
    function PlyrComponent(elementRef, ngZone, renderer) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.playerChange = new BehaviorSubject(null);
        this.events = new Map();
        this.plyrType = 'video';
        // ngx-plyr events
        this.plyrInit = (/** @type {?} */ (this.playerChange.pipe(filter(function (player) { return !!player; }))));
        // standard media events
        this.plyrProgress = this.createLazyEvent('progress');
        this.plyrPlaying = this.createLazyEvent('playing');
        this.plyrPlay = this.createLazyEvent('play');
        this.plyrPause = this.createLazyEvent('pause');
        this.plyrTimeUpdate = this.createLazyEvent('timeupdate');
        this.plyrVolumeChange = this.createLazyEvent('volumechange');
        this.plyrSeeking = this.createLazyEvent('seeking');
        this.plyrSeeked = this.createLazyEvent('seeked');
        this.plyrRateChange = this.createLazyEvent('ratechange');
        this.plyrEnded = this.createLazyEvent('ended');
        this.plyrEnterFullScreen = this.createLazyEvent('enterfullscreen');
        this.plyrExitFullScreen = this.createLazyEvent('exitfullscreen');
        this.plyrCaptionsEnabled = this.createLazyEvent('captionsenabled');
        this.plyrCaptionsDisabled = this.createLazyEvent('captionsdisabled');
        this.plyrLanguageChange = this.createLazyEvent('languagechange');
        this.plyrControlsHidden = this.createLazyEvent('controlshidden');
        this.plyrControlsShown = this.createLazyEvent('controlsshown');
        this.plyrReady = this.createLazyEvent('ready');
        // HTML5 events
        this.plyrLoadStart = this.createLazyEvent('loadstart');
        this.plyrLoadedData = this.createLazyEvent('loadeddata');
        this.plyrLoadedMetadata = this.createLazyEvent('loadedmetadata');
        this.plyrQualityChange = this.createLazyEvent('qualitychange');
        this.plyrCanPlay = this.createLazyEvent('canplay');
        this.plyrCanPlayThrough = this.createLazyEvent('canplaythrough');
        this.plyrStalled = this.createLazyEvent('stalled');
        this.plyrWaiting = this.createLazyEvent('waiting');
        this.plyrEmptied = this.createLazyEvent('emptied');
        this.plyrCueChange = this.createLazyEvent('cuechange');
        this.plyrError = this.createLazyEvent('error');
        // YouTube events
        this.plyrStateChange = this.createLazyEvent('statechange');
        this.subscriptions = [];
    }
    Object.defineProperty(PlyrComponent.prototype, "player", {
        get: /**
         * @return {?}
         */
        function () {
            return this.playerChange.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PlyrComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.subscriptions.push(this.plyrInit.pipe(first()).subscribe(function (player) {
            if (changes.plyrOptions) {
                if (!changes.plyrOptions.firstChange) {
                    _this.initPlyr(true);
                }
            }
            else {
                _this.updatePlyrSource(player);
            }
        }));
    };
    /**
     * @return {?}
     */
    PlyrComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyPlayer();
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    PlyrComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initPlyr();
    };
    /**
     * @private
     * @param {?=} force
     * @return {?}
     */
    PlyrComponent.prototype.initPlyr = /**
     * @private
     * @param {?=} force
     * @return {?}
     */
    function (force) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (force || !this.player) {
            this.ngZone.runOutsideAngular(function () {
                _this.destroyPlayer();
                _this.driver = _this.plyrDriver || new DefaultPlyrDriver();
                _this.ensureVideoElement();
                /** @type {?} */
                var newPlayer = _this.driver.create({
                    videoElement: _this.videoElement,
                    options: _this.plyrOptions,
                });
                _this.updatePlyrSource(newPlayer);
                _this.playerChange.next(newPlayer);
            });
        }
    };
    /**
     * @private
     * @param {?} plyr
     * @return {?}
     */
    PlyrComponent.prototype.updatePlyrSource = /**
     * @private
     * @param {?} plyr
     * @return {?}
     */
    function (plyr) {
        this.driver.updateSource({
            videoElement: this.videoElement,
            plyr: plyr,
            source: {
                type: this.plyrType,
                title: this.plyrTitle,
                sources: this.plyrSources,
                poster: this.plyrPoster,
                tracks: this.plyrTracks,
            },
        });
    };
    // see https://stackoverflow.com/a/53704102/1990451
    // see https://stackoverflow.com/a/53704102/1990451
    /**
     * @private
     * @template T
     * @param {?} name
     * @return {?}
     */
    PlyrComponent.prototype.createLazyEvent = 
    // see https://stackoverflow.com/a/53704102/1990451
    /**
     * @private
     * @template T
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        return (/** @type {?} */ (this.plyrInit.pipe(switchMap(function () { return new Observable(function (observer) { return _this.on(name, function (data) { return _this.ngZone.run(function () { return observer.next(data); }); }); }); }))));
    };
    /**
     * @private
     * @return {?}
     */
    PlyrComponent.prototype.destroyPlayer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.player) {
            Array.from(this.events.keys()).forEach(function (name) { return _this.off(name); });
            this.driver.destroy({
                plyr: this.player,
            });
            this.videoElement = null;
        }
    };
    Object.defineProperty(PlyrComponent.prototype, "hostElement", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    // this method is required because the plyr inserts clone of the original element on destroy
    // so we catch the clone element right here and reuse it
    // this method is required because the plyr inserts clone of the original element on destroy
    // so we catch the clone element right here and reuse it
    /**
     * @private
     * @return {?}
     */
    PlyrComponent.prototype.ensureVideoElement = 
    // this method is required because the plyr inserts clone of the original element on destroy
    // so we catch the clone element right here and reuse it
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var videoElement = this.hostElement.querySelector('video');
        if (videoElement) {
            this.videoElement = videoElement;
        }
        else {
            this.videoElement = this.renderer.createElement('video');
            this.videoElement.controls = true;
            this.videoElement.setAttribute('crossorigin', '');
            this.videoElement.setAttribute('playsinline', '');
            this.renderer.appendChild(this.hostElement, this.videoElement);
        }
    };
    /**
     * @private
     * @param {?} name
     * @param {?} handler
     * @return {?}
     */
    PlyrComponent.prototype.on = /**
     * @private
     * @param {?} name
     * @param {?} handler
     * @return {?}
     */
    function (name, handler) {
        this.events.set(name, handler);
        this.player.on((/** @type {?} */ (name)), handler);
    };
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    PlyrComponent.prototype.off = /**
     * @private
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.player.off((/** @type {?} */ (name)), this.events.get(name));
        this.events.delete(name);
    };
    PlyrComponent.decorators = [
        { type: Component, args: [{
                    selector: 'plyr, [plyr]',
                    // tslint:disable-line
                    template: "",
                    exportAs: 'plyr',
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PlyrComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    PlyrComponent.propDecorators = {
        plyrDriver: [{ type: Input }],
        plyrType: [{ type: Input }],
        plyrTitle: [{ type: Input }],
        plyrPoster: [{ type: Input }],
        plyrSources: [{ type: Input }],
        plyrTracks: [{ type: Input }],
        plyrOptions: [{ type: Input }],
        vr: [{ type: ViewChild, args: ['v',] }],
        plyrInit: [{ type: Output }],
        plyrProgress: [{ type: Output }],
        plyrPlaying: [{ type: Output }],
        plyrPlay: [{ type: Output }],
        plyrPause: [{ type: Output }],
        plyrTimeUpdate: [{ type: Output }],
        plyrVolumeChange: [{ type: Output }],
        plyrSeeking: [{ type: Output }],
        plyrSeeked: [{ type: Output }],
        plyrRateChange: [{ type: Output }],
        plyrEnded: [{ type: Output }],
        plyrEnterFullScreen: [{ type: Output }],
        plyrExitFullScreen: [{ type: Output }],
        plyrCaptionsEnabled: [{ type: Output }],
        plyrCaptionsDisabled: [{ type: Output }],
        plyrLanguageChange: [{ type: Output }],
        plyrControlsHidden: [{ type: Output }],
        plyrControlsShown: [{ type: Output }],
        plyrReady: [{ type: Output }],
        plyrLoadStart: [{ type: Output }],
        plyrLoadedData: [{ type: Output }],
        plyrLoadedMetadata: [{ type: Output }],
        plyrQualityChange: [{ type: Output }],
        plyrCanPlay: [{ type: Output }],
        plyrCanPlayThrough: [{ type: Output }],
        plyrStalled: [{ type: Output }],
        plyrWaiting: [{ type: Output }],
        plyrEmptied: [{ type: Output }],
        plyrCueChange: [{ type: Output }],
        plyrError: [{ type: Output }],
        plyrStateChange: [{ type: Output }]
    };
    return PlyrComponent;
}());
export { PlyrComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.playerChange;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrDriver;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrType;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrTitle;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrPoster;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrSources;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrTracks;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrOptions;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.vr;
    /** @type {?} */
    PlyrComponent.prototype.plyrInit;
    /** @type {?} */
    PlyrComponent.prototype.plyrProgress;
    /** @type {?} */
    PlyrComponent.prototype.plyrPlaying;
    /** @type {?} */
    PlyrComponent.prototype.plyrPlay;
    /** @type {?} */
    PlyrComponent.prototype.plyrPause;
    /** @type {?} */
    PlyrComponent.prototype.plyrTimeUpdate;
    /** @type {?} */
    PlyrComponent.prototype.plyrVolumeChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrSeeking;
    /** @type {?} */
    PlyrComponent.prototype.plyrSeeked;
    /** @type {?} */
    PlyrComponent.prototype.plyrRateChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrEnded;
    /** @type {?} */
    PlyrComponent.prototype.plyrEnterFullScreen;
    /** @type {?} */
    PlyrComponent.prototype.plyrExitFullScreen;
    /** @type {?} */
    PlyrComponent.prototype.plyrCaptionsEnabled;
    /** @type {?} */
    PlyrComponent.prototype.plyrCaptionsDisabled;
    /** @type {?} */
    PlyrComponent.prototype.plyrLanguageChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrControlsHidden;
    /** @type {?} */
    PlyrComponent.prototype.plyrControlsShown;
    /** @type {?} */
    PlyrComponent.prototype.plyrReady;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadStart;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadedData;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadedMetadata;
    /** @type {?} */
    PlyrComponent.prototype.plyrQualityChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrCanPlay;
    /** @type {?} */
    PlyrComponent.prototype.plyrCanPlayThrough;
    /** @type {?} */
    PlyrComponent.prototype.plyrStalled;
    /** @type {?} */
    PlyrComponent.prototype.plyrWaiting;
    /** @type {?} */
    PlyrComponent.prototype.plyrEmptied;
    /** @type {?} */
    PlyrComponent.prototype.plyrCueChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrError;
    /** @type {?} */
    PlyrComponent.prototype.plyrStateChange;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.driver;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.videoElement;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,