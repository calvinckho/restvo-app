/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, NgZone, Output, Renderer2, ViewChild } from '@angular/core';
import Plyr from 'plyr';
import { BehaviorSubject, Observable } from 'rxjs';
import { filter, first, switchMap } from 'rxjs/operators';
import { DefaultPlyrDriver } from '../plyr-driver/default-plyr-driver';
/**
 * @record
 */
function PlyrSimpleChanges() { }
if (false) {
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrType;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrTitle;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrPoster;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrSources;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrTracks;
    /** @type {?} */
    PlyrSimpleChanges.prototype.plyrOptions;
}
export class PlyrComponent {
    /**
     * @param {?} elementRef
     * @param {?} ngZone
     * @param {?} renderer
     */
    constructor(elementRef, ngZone, renderer) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.playerChange = new BehaviorSubject(null);
        this.events = new Map();
        this.plyrType = 'video';
        // ngx-plyr events
        this.plyrInit = (/** @type {?} */ (this.playerChange.pipe(filter(player => !!player))));
        // standard media events
        this.plyrProgress = this.createLazyEvent('progress');
        this.plyrPlaying = this.createLazyEvent('playing');
        this.plyrPlay = this.createLazyEvent('play');
        this.plyrPause = this.createLazyEvent('pause');
        this.plyrTimeUpdate = this.createLazyEvent('timeupdate');
        this.plyrVolumeChange = this.createLazyEvent('volumechange');
        this.plyrSeeking = this.createLazyEvent('seeking');
        this.plyrSeeked = this.createLazyEvent('seeked');
        this.plyrRateChange = this.createLazyEvent('ratechange');
        this.plyrEnded = this.createLazyEvent('ended');
        this.plyrEnterFullScreen = this.createLazyEvent('enterfullscreen');
        this.plyrExitFullScreen = this.createLazyEvent('exitfullscreen');
        this.plyrCaptionsEnabled = this.createLazyEvent('captionsenabled');
        this.plyrCaptionsDisabled = this.createLazyEvent('captionsdisabled');
        this.plyrLanguageChange = this.createLazyEvent('languagechange');
        this.plyrControlsHidden = this.createLazyEvent('controlshidden');
        this.plyrControlsShown = this.createLazyEvent('controlsshown');
        this.plyrReady = this.createLazyEvent('ready');
        // HTML5 events
        this.plyrLoadStart = this.createLazyEvent('loadstart');
        this.plyrLoadedData = this.createLazyEvent('loadeddata');
        this.plyrLoadedMetadata = this.createLazyEvent('loadedmetadata');
        this.plyrQualityChange = this.createLazyEvent('qualitychange');
        this.plyrCanPlay = this.createLazyEvent('canplay');
        this.plyrCanPlayThrough = this.createLazyEvent('canplaythrough');
        this.plyrStalled = this.createLazyEvent('stalled');
        this.plyrWaiting = this.createLazyEvent('waiting');
        this.plyrEmptied = this.createLazyEvent('emptied');
        this.plyrCueChange = this.createLazyEvent('cuechange');
        this.plyrError = this.createLazyEvent('error');
        // YouTube events
        this.plyrStateChange = this.createLazyEvent('statechange');
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    get player() {
        return this.playerChange.getValue();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.subscriptions.push(this.plyrInit.pipe(first()).subscribe((player) => {
            if (changes.plyrOptions) {
                if (!changes.plyrOptions.firstChange) {
                    this.initPlyr(true);
                }
            }
            else {
                this.updatePlyrSource(player);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyPlayer();
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initPlyr();
    }
    /**
     * @private
     * @param {?=} force
     * @return {?}
     */
    initPlyr(force = false) {
        if (force || !this.player) {
            this.ngZone.runOutsideAngular(() => {
                this.destroyPlayer();
                this.driver = this.plyrDriver || new DefaultPlyrDriver();
                this.ensureVideoElement();
                /** @type {?} */
                const newPlayer = this.driver.create({
                    videoElement: this.videoElement,
                    options: this.plyrOptions,
                });
                this.updatePlyrSource(newPlayer);
                this.playerChange.next(newPlayer);
            });
        }
    }
    /**
     * @private
     * @param {?} plyr
     * @return {?}
     */
    updatePlyrSource(plyr) {
        this.driver.updateSource({
            videoElement: this.videoElement,
            plyr,
            source: {
                type: this.plyrType,
                title: this.plyrTitle,
                sources: this.plyrSources,
                poster: this.plyrPoster,
                tracks: this.plyrTracks,
            },
        });
    }
    // see https://stackoverflow.com/a/53704102/1990451
    /**
     * @private
     * @template T
     * @param {?} name
     * @return {?}
     */
    createLazyEvent(name) {
        return (/** @type {?} */ (this.plyrInit.pipe(switchMap(() => new Observable(observer => this.on(name, (data) => this.ngZone.run(() => observer.next(data))))))));
    }
    /**
     * @private
     * @return {?}
     */
    destroyPlayer() {
        if (this.player) {
            Array.from(this.events.keys()).forEach(name => this.off(name));
            this.driver.destroy({
                plyr: this.player,
            });
            this.videoElement = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    // this method is required because the plyr inserts clone of the original element on destroy
    // so we catch the clone element right here and reuse it
    /**
     * @private
     * @return {?}
     */
    ensureVideoElement() {
        /** @type {?} */
        const videoElement = this.hostElement.querySelector('video');
        if (videoElement) {
            this.videoElement = videoElement;
        }
        else {
            this.videoElement = this.renderer.createElement('video');
            this.videoElement.controls = true;
            this.videoElement.setAttribute('crossorigin', '');
            this.videoElement.setAttribute('playsinline', '');
            this.renderer.appendChild(this.hostElement, this.videoElement);
        }
    }
    /**
     * @private
     * @param {?} name
     * @param {?} handler
     * @return {?}
     */
    on(name, handler) {
        this.events.set(name, handler);
        this.player.on((/** @type {?} */ (name)), handler);
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    off(name) {
        this.player.off((/** @type {?} */ (name)), this.events.get(name));
        this.events.delete(name);
    }
}
PlyrComponent.decorators = [
    { type: Component, args: [{
                selector: 'plyr, [plyr]',
                // tslint:disable-line
                template: "",
                exportAs: 'plyr',
                styles: [""]
            }] }
];
/** @nocollapse */
PlyrComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
PlyrComponent.propDecorators = {
    plyrDriver: [{ type: Input }],
    plyrType: [{ type: Input }],
    plyrTitle: [{ type: Input }],
    plyrPoster: [{ type: Input }],
    plyrSources: [{ type: Input }],
    plyrTracks: [{ type: Input }],
    plyrOptions: [{ type: Input }],
    vr: [{ type: ViewChild, args: ['v',] }],
    plyrInit: [{ type: Output }],
    plyrProgress: [{ type: Output }],
    plyrPlaying: [{ type: Output }],
    plyrPlay: [{ type: Output }],
    plyrPause: [{ type: Output }],
    plyrTimeUpdate: [{ type: Output }],
    plyrVolumeChange: [{ type: Output }],
    plyrSeeking: [{ type: Output }],
    plyrSeeked: [{ type: Output }],
    plyrRateChange: [{ type: Output }],
    plyrEnded: [{ type: Output }],
    plyrEnterFullScreen: [{ type: Output }],
    plyrExitFullScreen: [{ type: Output }],
    plyrCaptionsEnabled: [{ type: Output }],
    plyrCaptionsDisabled: [{ type: Output }],
    plyrLanguageChange: [{ type: Output }],
    plyrControlsHidden: [{ type: Output }],
    plyrControlsShown: [{ type: Output }],
    plyrReady: [{ type: Output }],
    plyrLoadStart: [{ type: Output }],
    plyrLoadedData: [{ type: Output }],
    plyrLoadedMetadata: [{ type: Output }],
    plyrQualityChange: [{ type: Output }],
    plyrCanPlay: [{ type: Output }],
    plyrCanPlayThrough: [{ type: Output }],
    plyrStalled: [{ type: Output }],
    plyrWaiting: [{ type: Output }],
    plyrEmptied: [{ type: Output }],
    plyrCueChange: [{ type: Output }],
    plyrError: [{ type: Output }],
    plyrStateChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.playerChange;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrDriver;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrType;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrTitle;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrPoster;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrSources;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrTracks;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.plyrOptions;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.vr;
    /** @type {?} */
    PlyrComponent.prototype.plyrInit;
    /** @type {?} */
    PlyrComponent.prototype.plyrProgress;
    /** @type {?} */
    PlyrComponent.prototype.plyrPlaying;
    /** @type {?} */
    PlyrComponent.prototype.plyrPlay;
    /** @type {?} */
    PlyrComponent.prototype.plyrPause;
    /** @type {?} */
    PlyrComponent.prototype.plyrTimeUpdate;
    /** @type {?} */
    PlyrComponent.prototype.plyrVolumeChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrSeeking;
    /** @type {?} */
    PlyrComponent.prototype.plyrSeeked;
    /** @type {?} */
    PlyrComponent.prototype.plyrRateChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrEnded;
    /** @type {?} */
    PlyrComponent.prototype.plyrEnterFullScreen;
    /** @type {?} */
    PlyrComponent.prototype.plyrExitFullScreen;
    /** @type {?} */
    PlyrComponent.prototype.plyrCaptionsEnabled;
    /** @type {?} */
    PlyrComponent.prototype.plyrCaptionsDisabled;
    /** @type {?} */
    PlyrComponent.prototype.plyrLanguageChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrControlsHidden;
    /** @type {?} */
    PlyrComponent.prototype.plyrControlsShown;
    /** @type {?} */
    PlyrComponent.prototype.plyrReady;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadStart;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadedData;
    /** @type {?} */
    PlyrComponent.prototype.plyrLoadedMetadata;
    /** @type {?} */
    PlyrComponent.prototype.plyrQualityChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrCanPlay;
    /** @type {?} */
    PlyrComponent.prototype.plyrCanPlayThrough;
    /** @type {?} */
    PlyrComponent.prototype.plyrStalled;
    /** @type {?} */
    PlyrComponent.prototype.plyrWaiting;
    /** @type {?} */
    PlyrComponent.prototype.plyrEmptied;
    /** @type {?} */
    PlyrComponent.prototype.plyrCueChange;
    /** @type {?} */
    PlyrComponent.prototype.plyrError;
    /** @type {?} */
    PlyrComponent.prototype.plyrStateChange;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.driver;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.videoElement;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PlyrComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx5ci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGx5ci8iLCJzb3VyY2VzIjpbImxpYi9wbHlyL3BseXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQWdCLEtBQUssRUFBRSxNQUFNLEVBQXdCLE1BQU0sRUFBRSxTQUFTLEVBQStCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuTCxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBR3ZFLGdDQU9DOzs7SUFOQyxxQ0FBdUI7O0lBQ3ZCLHNDQUF3Qjs7SUFDeEIsdUNBQXlCOztJQUN6Qix3Q0FBMEI7O0lBQzFCLHVDQUF5Qjs7SUFDekIsd0NBQTBCOztBQVM1QixNQUFNLE9BQU8sYUFBYTs7Ozs7O0lBdUV4QixZQUNVLFVBQXNDLEVBQ3RDLE1BQWMsRUFDZCxRQUFtQjtRQUZuQixlQUFVLEdBQVYsVUFBVSxDQUE0QjtRQUN0QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQXhFckIsaUJBQVksR0FBRyxJQUFJLGVBQWUsQ0FBTyxJQUFJLENBQUMsQ0FBQztRQU0vQyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUlWLGFBQVEsR0FBbUIsT0FBTyxDQUFDOztRQWUxQyxhQUFRLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQXNC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Q0FBMEQ7O0lBQzFELG9DQUF3RDs7SUFDeEQsaUNBQWtEOztJQUNsRCxrQ0FBb0Q7O0lBQ3BELHVDQUE4RDs7SUFDOUQseUNBQWtFOztJQUNsRSxvQ0FBd0Q7O0lBQ3hELG1DQUFzRDs7SUFDdEQsdUNBQThEOztJQUM5RCxrQ0FBb0Q7O0lBQ3BELDRDQUF3RTs7SUFDeEUsMkNBQXNFOztJQUN0RSw0Q0FBd0U7O0lBQ3hFLDZDQUEwRTs7SUFDMUUsMkNBQXNFOztJQUN0RSwyQ0FBc0U7O0lBQ3RFLDBDQUFvRTs7SUFDcEUsa0NBQW9EOztJQUdwRCxzQ0FBNEQ7O0lBQzVELHVDQUE4RDs7SUFDOUQsMkNBQXNFOztJQUN0RSwwQ0FBb0U7O0lBQ3BFLG9DQUF3RDs7SUFDeEQsMkNBQXNFOztJQUN0RSxvQ0FBd0Q7O0lBQ3hELG9DQUF3RDs7SUFDeEQsb0NBQXdEOztJQUN4RCxzQ0FBNEQ7O0lBQzVELGtDQUFvRDs7SUFHcEQsd0NBQWdFOzs7OztJQUVoRSxzQ0FBMkM7Ozs7O0lBRTNDLCtCQUEyQjs7Ozs7SUFFM0IscUNBQXVDOzs7OztJQUdyQyxtQ0FBOEM7Ozs7O0lBQzlDLCtCQUFzQjs7Ozs7SUFDdEIsaUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPdXRwdXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBQbHlyIGZyb20gJ3BseXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgZmlyc3QsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERlZmF1bHRQbHlyRHJpdmVyIH0gZnJvbSAnLi4vcGx5ci1kcml2ZXIvZGVmYXVsdC1wbHlyLWRyaXZlcic7XG5pbXBvcnQgeyBQbHlyRHJpdmVyIH0gZnJvbSAnLi4vcGx5ci1kcml2ZXIvcGx5ci1kcml2ZXInO1xuXG5pbnRlcmZhY2UgUGx5clNpbXBsZUNoYW5nZXMgZXh0ZW5kcyBTaW1wbGVDaGFuZ2VzIHtcbiAgcGx5clR5cGU6IFNpbXBsZUNoYW5nZTtcbiAgcGx5clRpdGxlOiBTaW1wbGVDaGFuZ2U7XG4gIHBseXJQb3N0ZXI6IFNpbXBsZUNoYW5nZTtcbiAgcGx5clNvdXJjZXM6IFNpbXBsZUNoYW5nZTtcbiAgcGx5clRyYWNrczogU2ltcGxlQ2hhbmdlO1xuICBwbHlyT3B0aW9uczogU2ltcGxlQ2hhbmdlO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbHlyLCBbcGx5cl0nLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlVXJsOiAnLi9wbHlyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGx5ci5jb21wb25lbnQuY3NzJ10sXG4gIGV4cG9ydEFzOiAncGx5cidcbn0pXG5leHBvcnQgY2xhc3MgUGx5ckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICBwcml2YXRlIHBsYXllckNoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGx5cj4obnVsbCk7XG5cbiAgZ2V0IHBsYXllcigpOiBQbHlyIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJDaGFuZ2UuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZXZlbnRzID0gbmV3IE1hcCgpO1xuXG4gIEBJbnB1dCgpIHByaXZhdGUgcGx5ckRyaXZlcjogUGx5ckRyaXZlcjtcblxuICBASW5wdXQoKSBwcml2YXRlIHBseXJUeXBlOiBQbHlyLk1lZGlhVHlwZSA9ICd2aWRlbyc7XG5cbiAgQElucHV0KCkgcHJpdmF0ZSBwbHlyVGl0bGU6IHN0cmluZztcblxuICBASW5wdXQoKSBwcml2YXRlIHBseXJQb3N0ZXI6IHN0cmluZztcblxuICBASW5wdXQoKSBwcml2YXRlIHBseXJTb3VyY2VzOiBQbHlyLlNvdXJjZVtdO1xuXG4gIEBJbnB1dCgpIHByaXZhdGUgcGx5clRyYWNrczogUGx5ci5UcmFja1tdO1xuXG4gIEBJbnB1dCgpIHByaXZhdGUgcGx5ck9wdGlvbnM6IFBseXIuT3B0aW9ucztcblxuICBAVmlld0NoaWxkKCd2JykgcHJpdmF0ZSB2cjogRWxlbWVudFJlZjtcblxuICAvLyBuZ3gtcGx5ciBldmVudHNcbiAgQE91dHB1dCgpIHBseXJJbml0ID0gdGhpcy5wbGF5ZXJDaGFuZ2UucGlwZShmaWx0ZXIocGxheWVyID0+ICEhcGxheWVyKSkgYXMgRXZlbnRFbWl0dGVyPFBseXI+O1xuXG4gIC8vIHN0YW5kYXJkIG1lZGlhIGV2ZW50c1xuICBAT3V0cHV0KCkgcGx5clByb2dyZXNzID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ3Byb2dyZXNzJyk7XG4gIEBPdXRwdXQoKSBwbHlyUGxheWluZyA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdwbGF5aW5nJyk7XG4gIEBPdXRwdXQoKSBwbHlyUGxheSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdwbGF5Jyk7XG4gIEBPdXRwdXQoKSBwbHlyUGF1c2UgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgncGF1c2UnKTtcbiAgQE91dHB1dCgpIHBseXJUaW1lVXBkYXRlID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ3RpbWV1cGRhdGUnKTtcbiAgQE91dHB1dCgpIHBseXJWb2x1bWVDaGFuZ2UgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgndm9sdW1lY2hhbmdlJyk7XG4gIEBPdXRwdXQoKSBwbHlyU2Vla2luZyA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdzZWVraW5nJyk7XG4gIEBPdXRwdXQoKSBwbHlyU2Vla2VkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ3NlZWtlZCcpO1xuICBAT3V0cHV0KCkgcGx5clJhdGVDaGFuZ2UgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgncmF0ZWNoYW5nZScpO1xuICBAT3V0cHV0KCkgcGx5ckVuZGVkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2VuZGVkJyk7XG4gIEBPdXRwdXQoKSBwbHlyRW50ZXJGdWxsU2NyZWVuID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2VudGVyZnVsbHNjcmVlbicpO1xuICBAT3V0cHV0KCkgcGx5ckV4aXRGdWxsU2NyZWVuID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2V4aXRmdWxsc2NyZWVuJyk7XG4gIEBPdXRwdXQoKSBwbHlyQ2FwdGlvbnNFbmFibGVkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2NhcHRpb25zZW5hYmxlZCcpO1xuICBAT3V0cHV0KCkgcGx5ckNhcHRpb25zRGlzYWJsZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgnY2FwdGlvbnNkaXNhYmxlZCcpO1xuICBAT3V0cHV0KCkgcGx5ckxhbmd1YWdlQ2hhbmdlID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2xhbmd1YWdlY2hhbmdlJyk7XG4gIEBPdXRwdXQoKSBwbHlyQ29udHJvbHNIaWRkZW4gPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgnY29udHJvbHNoaWRkZW4nKTtcbiAgQE91dHB1dCgpIHBseXJDb250cm9sc1Nob3duID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2NvbnRyb2xzc2hvd24nKTtcbiAgQE91dHB1dCgpIHBseXJSZWFkeSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdyZWFkeScpO1xuXG4gIC8vIEhUTUw1IGV2ZW50c1xuICBAT3V0cHV0KCkgcGx5ckxvYWRTdGFydCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdsb2Fkc3RhcnQnKTtcbiAgQE91dHB1dCgpIHBseXJMb2FkZWREYXRhID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2xvYWRlZGRhdGEnKTtcbiAgQE91dHB1dCgpIHBseXJMb2FkZWRNZXRhZGF0YSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdsb2FkZWRtZXRhZGF0YScpO1xuICBAT3V0cHV0KCkgcGx5clF1YWxpdHlDaGFuZ2UgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgncXVhbGl0eWNoYW5nZScpO1xuICBAT3V0cHV0KCkgcGx5ckNhblBsYXkgPSB0aGlzLmNyZWF0ZUxhenlFdmVudCgnY2FucGxheScpO1xuICBAT3V0cHV0KCkgcGx5ckNhblBsYXlUaHJvdWdoID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2NhbnBsYXl0aHJvdWdoJyk7XG4gIEBPdXRwdXQoKSBwbHlyU3RhbGxlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdzdGFsbGVkJyk7XG4gIEBPdXRwdXQoKSBwbHlyV2FpdGluZyA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCd3YWl0aW5nJyk7XG4gIEBPdXRwdXQoKSBwbHlyRW1wdGllZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdlbXB0aWVkJyk7XG4gIEBPdXRwdXQoKSBwbHlyQ3VlQ2hhbmdlID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2N1ZWNoYW5nZScpO1xuICBAT3V0cHV0KCkgcGx5ckVycm9yID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQoJ2Vycm9yJyk7XG5cbiAgLy8gWW91VHViZSBldmVudHNcbiAgQE91dHB1dCgpIHBseXJTdGF0ZUNoYW5nZSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50KCdzdGF0ZWNoYW5nZScpO1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBwcml2YXRlIGRyaXZlcjogUGx5ckRyaXZlcjtcblxuICBwcml2YXRlIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+LFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICApIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFBseXJTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5wbHlySW5pdC5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgocGxheWVyOiBQbHlyKSA9PiB7XG4gICAgICBpZiAoY2hhbmdlcy5wbHlyT3B0aW9ucykge1xuICAgICAgICBpZiAoIWNoYW5nZXMucGx5ck9wdGlvbnMuZmlyc3RDaGFuZ2UpIHtcbiAgICAgICAgICB0aGlzLmluaXRQbHlyKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVBseXJTb3VyY2UocGxheWVyKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzID0+IHMudW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0UGx5cigpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0UGx5cihmb3JjZSA9IGZhbHNlKSB7XG4gICAgaWYgKGZvcmNlIHx8ICF0aGlzLnBsYXllcikge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcblxuICAgICAgICB0aGlzLmRyaXZlciA9IHRoaXMucGx5ckRyaXZlciB8fCBuZXcgRGVmYXVsdFBseXJEcml2ZXIoKTtcblxuICAgICAgICB0aGlzLmVuc3VyZVZpZGVvRWxlbWVudCgpO1xuXG4gICAgICAgIGNvbnN0IG5ld1BsYXllciA9IHRoaXMuZHJpdmVyLmNyZWF0ZSh7XG4gICAgICAgICAgdmlkZW9FbGVtZW50OiB0aGlzLnZpZGVvRWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLnBseXJPcHRpb25zLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVBseXJTb3VyY2UobmV3UGxheWVyKTtcblxuICAgICAgICB0aGlzLnBsYXllckNoYW5nZS5uZXh0KG5ld1BsYXllcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVBseXJTb3VyY2UocGx5cjogUGx5cikge1xuICAgIHRoaXMuZHJpdmVyLnVwZGF0ZVNvdXJjZSh7XG4gICAgICB2aWRlb0VsZW1lbnQ6IHRoaXMudmlkZW9FbGVtZW50LFxuICAgICAgcGx5cixcbiAgICAgIHNvdXJjZToge1xuICAgICAgICB0eXBlOiB0aGlzLnBseXJUeXBlLFxuICAgICAgICB0aXRsZTogdGhpcy5wbHlyVGl0bGUsXG4gICAgICAgIHNvdXJjZXM6IHRoaXMucGx5clNvdXJjZXMsXG4gICAgICAgIHBvc3RlcjogdGhpcy5wbHlyUG9zdGVyLFxuICAgICAgICB0cmFja3M6IHRoaXMucGx5clRyYWNrcyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUzNzA0MTAyLzE5OTA0NTFcbiAgcHJpdmF0ZSBjcmVhdGVMYXp5RXZlbnQ8VCBleHRlbmRzIFBseXIuUGx5ckV2ZW50PihuYW1lOiBQbHlyLlN0YW5kYXJkRXZlbnQgfCBQbHlyLkh0bWw1RXZlbnQgfCBQbHlyLllvdXR1YmVFdmVudCk6IEV2ZW50RW1pdHRlcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMucGx5ckluaXQucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB0aGlzLm9uKG5hbWUsIChkYXRhOiBUKSA9PiB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gb2JzZXJ2ZXIubmV4dChkYXRhKSkpKSlcbiAgICApIGFzIEV2ZW50RW1pdHRlcjxUPjtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveVBsYXllcigpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIpIHtcbiAgICAgIEFycmF5LmZyb20odGhpcy5ldmVudHMua2V5cygpKS5mb3JFYWNoKG5hbWUgPT4gdGhpcy5vZmYobmFtZSkpO1xuXG4gICAgICB0aGlzLmRyaXZlci5kZXN0cm95KHtcbiAgICAgICAgcGx5cjogdGhpcy5wbGF5ZXIsXG4gICAgICB9KTtcblxuICAgICAgdGhpcy52aWRlb0VsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGhvc3RFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIC8vIHRoaXMgbWV0aG9kIGlzIHJlcXVpcmVkIGJlY2F1c2UgdGhlIHBseXIgaW5zZXJ0cyBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudCBvbiBkZXN0cm95XG4gIC8vIHNvIHdlIGNhdGNoIHRoZSBjbG9uZSBlbGVtZW50IHJpZ2h0IGhlcmUgYW5kIHJldXNlIGl0XG4gIHByaXZhdGUgZW5zdXJlVmlkZW9FbGVtZW50KCkge1xuICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMuaG9zdEVsZW1lbnQucXVlcnlTZWxlY3RvcigndmlkZW8nKTtcblxuICAgIGlmICh2aWRlb0VsZW1lbnQpIHtcbiAgICAgIHRoaXMudmlkZW9FbGVtZW50ID0gdmlkZW9FbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgIHRoaXMudmlkZW9FbGVtZW50LmNvbnRyb2xzID0gdHJ1ZTtcbiAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCAnJyk7XG4gICAgICB0aGlzLnZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgJycpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmhvc3RFbGVtZW50LCB0aGlzLnZpZGVvRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvbihuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLnNldChuYW1lLCBoYW5kbGVyKTtcbiAgICB0aGlzLnBsYXllci5vbihuYW1lIGFzIGFueSwgaGFuZGxlcik7XG4gIH1cblxuICBwcml2YXRlIG9mZihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBsYXllci5vZmYobmFtZSBhcyBhbnksIHRoaXMuZXZlbnRzLmdldChuYW1lKSk7XG4gICAgdGhpcy5ldmVudHMuZGVsZXRlKG5hbWUpO1xuICB9XG5cbn1cbiJdfQ==