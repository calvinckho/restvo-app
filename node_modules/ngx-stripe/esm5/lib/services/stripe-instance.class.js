/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { isSourceData } from '../interfaces/sources';
import { isAccount, isAccountData, isBankAccount, isBankAccountData, isPii, isPiiData } from '../interfaces/token';
import { isHandleCardPaymentOptions } from '../interfaces/payment-intent';
var StripeInstance = /** @class */ (function () {
    function StripeInstance(loader, window, key, options) {
        var _this = this;
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.loader
            .asStream()
            .pipe(filter(function (status) { return status.loaded === true; }), first(), map(function () { return ((/** @type {?} */ (_this.window.getNativeWindow()))).Stripe; }))
            .subscribe(function (Stripe) {
            /** @type {?} */
            var stripe = _this.options
                ? ((/** @type {?} */ (Stripe(_this.key, _this.options))))
                : ((/** @type {?} */ (Stripe(_this.key))));
            _this.stripe$.next(stripe);
        });
    }
    /**
     * @return {?}
     */
    StripeInstance.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.stripe$.getValue();
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.elements = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), map(function (stripe) { return ((/** @type {?} */ (stripe))).elements(options); }), first());
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    StripeInstance.prototype.createToken = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            if (isAccount(a) && isAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isBankAccount(a) && isBankAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return from(stripe.createToken(a, b));
            }
            else {
                return from(stripe.createToken((/** @type {?} */ (a)), (/** @type {?} */ (b))));
            }
        }), first());
    };
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    StripeInstance.prototype.createSource = /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            if (isSourceData(a)) {
                return from(stripe.createSource((/** @type {?} */ (a))));
            }
            return from(stripe.createSource((/** @type {?} */ (a)), b));
        }), first());
    };
    /**
     * @param {?} source
     * @return {?}
     */
    StripeInstance.prototype.retrieveSource = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            return from(stripe.retrieveSource(source));
        }), first());
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeInstance.prototype.paymentRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var stripe = this.getInstance();
        if (stripe) {
            return stripe.paymentRequest(options);
        }
        return undefined;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    StripeInstance.prototype.handleCardPayment = /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    function (a, b, c) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            if (isHandleCardPaymentOptions(b)) {
                return from(stripe.handleCardPayment((/** @type {?} */ (a)), (/** @type {?} */ (b))));
            }
            return from(stripe.handleCardPayment((/** @type {?} */ (a)), (/** @type {?} */ (b)), (/** @type {?} */ (c))));
        }));
    };
    /**
     * @param {?} a
     * @return {?}
     */
    StripeInstance.prototype.handleCardAction = /**
     * @param {?} a
     * @return {?}
     */
    function (a) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            return from(stripe.handleCardAction((/** @type {?} */ (a))));
        }));
    };
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    StripeInstance.prototype.confirmPaymentIntent = /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            return from(stripe.confirmPaymentIntent((/** @type {?} */ (a)), (/** @type {?} */ (b))));
        }));
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    StripeInstance.prototype.createPaymentMethod = /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    function (a, b, c) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            /** @type {?} */
            var stripe = (/** @type {?} */ (s));
            return from(stripe.createPaymentMethod(a, b, c));
        }), first());
    };
    return StripeInstance;
}());
export { StripeInstance };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.stripe$;
    /** @type {?} */
    StripeInstance.prototype.loader;
    /** @type {?} */
    StripeInstance.prototype.window;
    /** @type {?} */
    StripeInstance.prototype.key;
    /** @type {?} */
    StripeInstance.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,