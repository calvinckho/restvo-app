{"version":3,"file":"ngx-stripe.js.map","sources":["ng://ngx-stripe/lib/services/window-ref.service.ts","ng://ngx-stripe/lib/services/document-ref.service.ts","ng://ngx-stripe/lib/services/api-loader.service.ts","ng://ngx-stripe/lib/interfaces/stripe.ts","ng://ngx-stripe/lib/interfaces/sources.ts","ng://ngx-stripe/lib/interfaces/token.ts","ng://ngx-stripe/lib/interfaces/payment-intent.ts","ng://ngx-stripe/lib/services/stripe-instance.class.ts","ng://ngx-stripe/lib/services/stripe.service.ts","ng://ngx-stripe/lib/services/stripe-factory.service.ts","ng://ngx-stripe/lib/components/stripe-card.component.ts","ng://ngx-stripe/lib/ngx-stripe.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  public status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) public platformId: any,\n    public window: WindowRef,\n    public document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: Status = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  Account,\n  AccountData,\n  BankAccount,\n  BankAccountData,\n  CardDataOptions,\n  Pii,\n  PiiData,\n  TokenResult\n} from './token';\nimport { SourceData, SourceParams, SourceResult } from './sources';\nimport { PaymentRequestOptions } from './payment-request';\nimport {\n  HandleCardPaymentOptions,\n  PaymentIntentResult,\n  ConfirmPaymentIntentOptions,\n  PaymentMethodData,\n  PaymentMethodResult\n} from './payment-intent';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(account: Account, accountData: AccountData): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  paymentRequest(options: PaymentRequestOptions): any;\n  handleCardPayment(\n    clientSecret: string,\n    cardElement: Element,\n    data?: HandleCardPaymentOptions\n  ): Promise<PaymentIntentResult>;\n  handleCardPayment(\n    clientSecret: string,\n    data?: HandleCardPaymentOptions\n  ): Promise<PaymentIntentResult>;\n  handleCardAction(clientSecret: string): Promise<PaymentIntentResult>;\n  confirmPaymentIntent(\n    clientSecret: string,\n    data?: ConfirmPaymentIntentOptions\n  ): Promise<PaymentIntentResult>;\n  createPaymentMethod(\n    type: string,\n    cardElement: Element,\n    data?: PaymentMethodData\n  ): Promise<PaymentMethodResult>;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Address, Error } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  three_d_secure: {\n    card: string;\n  };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  three_d_secure?: {\n    card: string;\n  };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type Account = 'account';\n\nexport interface Address {\n  line1: string;\n  line2?: string;\n  city: string;\n  state: string;\n  postal_code: string;\n}\n\nexport interface DateOfBirth {\n  day: number;\n  month: number;\n  year: number;\n}\n\nexport interface LegalEntity {\n  address: Address;\n  address_kana?: Address;\n  address_kanji?: Address;\n  dob?: DateOfBirth;\n  first_name: string;\n  first_name_kana?: string;\n  first_name_kanji?: string;\n  gender?: string;\n  last_name: string;\n  last_name_kana?: string;\n  last_name_kanji?: string;\n  maiden_name?: string;\n  personal_id_number?: string;\n  phone_number?: string;\n  ssn_last_4?: string;\n}\n\nexport interface IndividualEntity extends LegalEntity {\n  type: 'individual';\n}\n\nexport interface BusinessEntity extends LegalEntity {\n  type: 'company';\n  additional_owners?: LegalEntity[];\n  business_name: string;\n  business_name_kana?: string;\n  business_name_kanji?: string;\n  business_tax_id?: string;\n  business_vat_id?: string;\n  personal_address?: Address;\n  personal_address_kana?: Address;\n  personal_address_kanji?: Address;\n  tax_id_registrar?: string;\n}\n\nexport interface AccountData {\n  legal_entity?: IndividualEntity | BusinessEntity;\n  tos_shown_and_accepted?: boolean;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name?: string;\n  account_holder_type?: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isAccount(account: any): account is Account {\n  return account === 'account';\n}\n\nexport function isAccountData(accountData: any): accountData is AccountData {\n  return accountData.legal_entity || accountData.tos_shown_and_accepted;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company' ||\n      bankAccountData.account_holder_type === undefined)\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import { Error, Address } from './utils';\n\nexport interface HandleCardPaymentOptions {\n  payment_method?: string;\n  payment_method_data?: {\n    billing_details?: {\n      address?: Address;\n      email?: string;\n      name?: string;\n      phone?: string;\n    };\n  };\n  shipping?: {\n    address: Address;\n    name: string;\n    carrier?: string;\n    phone?: string;\n    tracking_number?: string;\n  };\n  receipt_email?: string;\n  save_payment_method?: boolean;\n}\n\nexport function isHandleCardPaymentOptions(\n  handleCardPaymentOptions: any\n): handleCardPaymentOptions is HandleCardPaymentOptions {\n  return 'type' in handleCardPaymentOptions;\n}\n\nexport interface ConfirmPaymentIntentOptions extends HandleCardPaymentOptions {\n  return_url?: string;\n  use_stripe_sdk?: boolean;\n  source?: string;\n}\n\nexport interface PaymentIntent {\n  id: string;\n  object: string;\n  amount: number;\n  amount_capturable: number;\n  amount_received: number;\n  application: string;\n  application_fee_amount: number;\n  canceled_at: Date;\n  cancellation_reason: string;\n  capture_method: string;\n  charges: {\n    object: string;\n    data: any[];\n    has_more: boolean;\n    total_count: number;\n    url: string;\n  };\n  client_secret: string;\n  confirmation_method: string;\n  created: Date;\n  currency: string;\n  customer: string;\n  description: string;\n  last_payment_error: any; // Todo\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  next_source_action: any; // Todo\n  on_behalf_of: string;\n  payment_method: string;\n  payment_method_types: string[];\n  receipt_email: string;\n  review: string;\n  shipping: {\n    address: Address;\n    carrier: string;\n    name: string;\n    phone: string;\n    tracking_number: string;\n  };\n  source: string;\n  statement_descriptor: string;\n  status: string;\n  transfer_data: any; // Todo\n  transfer_group: string;\n}\n\nexport interface PaymentIntentResult {\n  paymentIntent?: PaymentIntent;\n  error?: Error;\n}\n\nexport interface PaymentMethodData {\n  type?: string;\n  billing_details?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  card?: {\n    exp_month?: number;\n    exp_year?: number;\n    number?: string;\n    cvc?: string;\n  };\n  metadata: { [key: string]: any };\n}\n\nexport interface PaymentMethod {\n  id: string;\n  object: string;\n  billing_details?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  card: {\n    brand: string;\n    checks: {\n      address_line1_check: string;\n      address_postal_code_check: string;\n      cvc_check: string;\n    };\n    country: string;\n    exp_month: number;\n    exp_year: number;\n    fingerprint: string;\n    funding: string;\n    generated_from: string;\n    last4: string;\n    three_d_secure_usage: {\n      supported: boolean;\n    };\n    wallet: string;\n  };\n  created: number;\n  customer: string;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  type: string;\n}\n\nexport interface PaymentMethodResult {\n  paymentMethod?: PaymentMethod;\n  error?: Error;\n}\n","import { BehaviorSubject, from, Observable } from 'rxjs';\nimport { filter, first, map, switchMap } from 'rxjs/operators';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport { StripeJS, Options } from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  Account,\n  AccountData,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isAccount,\n  isAccountData,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\nimport {\n  HandleCardPaymentOptions,\n  PaymentIntentResult,\n  ConfirmPaymentIntentOptions,\n  PaymentMethodData,\n  PaymentMethodResult,\n  isHandleCardPaymentOptions\n} from '../interfaces/payment-intent';\n\nexport class StripeInstance implements StripeServiceInterface {\n  private stripe$: BehaviorSubject<StripeJS | undefined> = new BehaviorSubject<\n    StripeJS | undefined\n  >(undefined);\n\n  constructor(\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef,\n    public key: string,\n    public options?: Options\n  ) {\n    this.loader\n      .asStream()\n      .pipe(\n        filter((status: Status) => status.loaded === true),\n        first(),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      )\n      .subscribe((Stripe: any) => {\n        const stripe = this.options\n          ? (Stripe(this.key, this.options) as StripeJS)\n          : (Stripe(this.key) as StripeJS);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe$.getValue();\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      map(stripe => (stripe as StripeJS).elements(options)),\n      first()\n    );\n  }\n\n  public createToken(\n    a: Element | Account | BankAccount | Pii,\n    b: CardDataOptions | AccountData | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isAccount(a) && isAccountData(b)) {\n          return from(stripe.createToken(a, b));\n        } else if (isBankAccount(a) && isBankAccountData(b)) {\n          return from(stripe.createToken(a, b));\n        } else if (isPii(a) && isPiiData(b)) {\n          return from(stripe.createToken(a, b));\n        } else {\n          return from(\n            stripe.createToken(a as Element, b as CardDataOptions | undefined)\n          );\n        }\n      }),\n      first()\n    );\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isSourceData(a)) {\n          return from(stripe.createSource(a as SourceData));\n        }\n        return from(stripe.createSource(a as Element, b));\n      }),\n      first()\n    );\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(stripe.retrieveSource(source));\n      }),\n      first()\n    );\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    const stripe = this.getInstance();\n    if (stripe) {\n      return stripe.paymentRequest(options);\n    }\n    return undefined;\n  }\n\n  public handleCardPayment(\n    a: string,\n    b: Element | HandleCardPaymentOptions,\n    c?: HandleCardPaymentOptions | undefined\n  ): Observable<PaymentIntentResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isHandleCardPaymentOptions(b)) {\n          return from(\n            stripe.handleCardPayment(a as string, b as HandleCardPaymentOptions)\n          );\n        }\n\n        return from(\n          stripe.handleCardPayment(\n            a as string,\n            b as Element,\n            c as HandleCardPaymentOptions | undefined\n          )\n        );\n      })\n    );\n  }\n\n  public handleCardAction(a: string): Observable<PaymentIntentResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(stripe.handleCardAction(a as string));\n      })\n    );\n  }\n\n  public confirmPaymentIntent(\n    a: string,\n    b?: ConfirmPaymentIntentOptions\n  ): Observable<PaymentIntentResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(\n          stripe.confirmPaymentIntent(\n            a as string,\n            b as ConfirmPaymentIntentOptions | undefined\n          )\n        );\n      })\n    );\n  }\n\n  public createPaymentMethod(\n    a: string,\n    b: Element,\n    c?: PaymentMethodData | undefined\n  ): Observable<PaymentMethodResult> {\n    return this.stripe$.asObservable().pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(stripe.createPaymentMethod(a, b, c));\n      }),\n      first()\n    );\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  Options,\n  StripeJS\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { SourceData, SourceResult, SourceParams } from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  Account,\n  AccountData,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\nimport { filter, map } from 'rxjs/operators';\nimport {\n  HandleCardPaymentOptions,\n  ConfirmPaymentIntentOptions,\n  PaymentIntentResult,\n  PaymentMethodResult,\n  PaymentMethodData\n} from '../interfaces/payment-intent';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  public stripe!: StripeInstance;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public key: string,\n    @Inject(STRIPE_OPTIONS) public options: Options,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader.asStream().pipe(\n      filter((status: Status) => status.loaded === true),\n      map(() => (this.window.getNativeWindow() as any).Stripe)\n    );\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(this.loader, this.window, key, options);\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | Account | BankAccount | Pii,\n    b: CardDataOptions | AccountData | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n\n  public handleCardPayment(\n    a: string,\n    b?: Element | HandleCardPaymentOptions,\n    c?: HandleCardPaymentOptions | undefined\n  ): Observable<PaymentIntentResult> {\n    return this.stripe.handleCardPayment(a, b, c);\n  }\n\n  public handleCardAction(a: string): Observable<PaymentIntentResult> {\n    return this.stripe.handleCardAction(a);\n  }\n\n  public createPaymentMethod(\n    a: string,\n    b: Element,\n    c?: PaymentMethodData\n  ): Observable<PaymentMethodResult> {\n    return this.stripe.createPaymentMethod(a, b, c);\n  }\n\n  public confirmPaymentIntent(\n    a: string,\n    b?: ConfirmPaymentIntentOptions\n  ): Observable<PaymentIntentResult> {\n    return this.stripe.confirmPaymentIntent(a, b);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport {\n  Options,\n  STRIPE_OPTIONS,\n  STRIPE_PUBLISHABLE_KEY\n} from '../interfaces/stripe';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public baseKey: string,\n    @Inject(STRIPE_OPTIONS) public baseOptions: string,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {}\n\n  public create(key: string, options?: Options): StripeInstance {\n    return new StripeInstance(this.loader, this.window, key, options);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { switchMap, filter } from 'rxjs/operators';\n\nimport {\n  Element as StripeElement,\n  ElementOptions,\n  ElementEventType\n} from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { StripeInstance } from '../services/stripe-instance.class';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `\n    <div class=\"field\" #stripeCard></div>\n  `\n})\nexport class StripeCardComponent implements OnInit {\n  @Output() public card = new EventEmitter<StripeElement>();\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output()\n  public on = new EventEmitter<{ type: ElementEventType; event: any }>();\n\n  @ViewChild('stripeCard') public stripeCard!: ElementRef;\n  public element!: StripeElement;\n  @Input()\n  public set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  public options$ = new BehaviorSubject<ElementOptions>({});\n  @Input()\n  public set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  public elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  @Input()\n  public set stripe(stripeIn: StripeInstance) {\n    this.stripe$.next(stripeIn);\n  }\n  public stripe$ = new BehaviorSubject<StripeInstance | null>(null);\n\n  constructor(public stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<Elements> = combineLatest(\n      this.elementsOptions$.asObservable(),\n      this.stripe$.asObservable()\n    ).pipe(\n      switchMap(([options, stripe]) => {\n        if (stripe) {\n          if (Object.keys(options).length > 0) {\n            return stripe.elements(options);\n          }\n          return stripe.elements();\n        } else {\n          if (Object.keys(options).length > 0) {\n            return this.stripeService.elements(options);\n          }\n          return this.stripeService.elements();\n        }\n      })\n    );\n    combineLatest(\n      elements$,\n      this.options$.asObservable().pipe(filter(options => Boolean(options)))\n    ).subscribe(([elements, options]) => {\n      this.element = elements.create('card', options);\n\n      this.element.on('blur', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'blur'\n        })\n      );\n\n      this.element.on('change', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'change'\n        })\n      );\n\n      this.element.on('click', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'click'\n        })\n      );\n\n      this.element.on('focus', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'focus'\n        })\n      );\n\n      this.element.on('ready', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'ready'\n        })\n      );\n\n      this.element.mount(this.stripeCard.nativeElement);\n\n      this.card.emit(this.element);\n    });\n  }\n\n  public getCard(): StripeElement {\n    return this.element;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { LazyStripeAPILoader } from './services/api-loader.service';\nimport { StripeService } from './services/stripe.service';\nimport { StripeFactoryService } from './services/stripe-factory.service';\n\nimport { WindowRef } from './services/window-ref.service';\nimport { DocumentRef } from './services/document-ref.service';\n\nimport {\n  Options,\n  STRIPE_OPTIONS,\n  STRIPE_PUBLISHABLE_KEY\n} from './interfaces/stripe';\nimport { StripeCardComponent } from './components/stripe-card.component';\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n\n  public static forChild(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
