{"version":3,"file":"ngx-electron.js","sources":["ng://ngx-electron/lib/electron.service.ts","ng://ngx-electron/lib/electron.service.ref.ts","ng://ngx-electron/public_api.ts"],"sourcesContent":["import * as Electron from 'electron';\nimport { ElectronWindow } from './typings/electron.window';\n\ndeclare let window: ElectronWindow;\n\nexport class ElectronService {\n    private _electron: Electron.RendererInterface;\n\n    private get electron(): Electron.RendererInterface {\n        if (!this._electron) {\n            if (window && window.require) {\n                this._electron = window.require('electron');\n                return this._electron;\n            }\n            return null;\n        }\n        return this._electron;\n    }\n\n    /**\n     * determines if SPA is running in Electron\n     */\n    public get isElectronApp(): boolean {\n        return !!window.navigator.userAgent.match(/Electron/);\n    }\n\n    public get isMacOS(): boolean {\n        return this.isElectronApp && process.platform === 'darwin';\n    }\n\n    public get isWindows(): boolean {\n        return this.isElectronApp && process.platform === 'win32';\n    }\n\n    public get isLinux(): boolean {\n        return this.isElectronApp && process.platform === 'linux';\n    }\n\n    public get isX86(): boolean {\n        return this.isElectronApp && process.arch === 'ia32';\n    }\n\n    public get isX64(): boolean {\n        return this.isElectronApp && process.arch === 'x64';\n    }\n\n    public get isArm(): boolean {\n        return this.isElectronApp && process.arch === 'arm';\n    }\n\n    public get desktopCapturer(): Electron.DesktopCapturer {\n        return this.electron ? this.electron.desktopCapturer : null;\n    }\n\n    public get ipcRenderer(): Electron.IpcRenderer {\n        return this.electron ? this.electron.ipcRenderer : null;\n    }\n\n    public get remote(): Electron.Remote {\n        return this.electron ? this.electron.remote : null;\n    }\n\n    public get webFrame(): Electron.WebFrame {\n        return this.electron ? this.electron.webFrame : null;\n    }\n\n    public get clipboard(): Electron.Clipboard {\n        return this.electron ? this.electron.clipboard : null;\n    }\n\n    public get crashReporter(): Electron.CrashReporter {\n        return this.electron ? this.electron.crashReporter : null;\n    }\n\n    public get process(): any {\n        return this.remote ? this.remote.process : null;\n    }\n\n    public get nativeImage(): typeof Electron.nativeImage {\n        return this.electron ? this.electron.nativeImage : null;\n    }\n\n    public get screen(): Electron.Screen {\n        return this.electron ? this.remote.screen : null;\n    }\n\n    public get shell(): Electron.Shell {\n        return this.electron ? this.electron.shell : null;\n    }\n}\n","import { ElectronService } from './electron.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ElectronServiceRef extends ElectronService {\n\n    constructor() {\n        super();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ElectronService } from './lib/electron.service';\nimport { ElectronServiceRef } from './lib/electron.service.ref';\n\nexport * from './lib/electron.service';\nexport * from './lib/electron.service.ref';\n\n@NgModule({\n    declarations: [],\n    exports: [],\n    providers: [{ provide: ElectronService, useClass: ElectronServiceRef }]\n})\nexport class NgxElectronModule {\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}