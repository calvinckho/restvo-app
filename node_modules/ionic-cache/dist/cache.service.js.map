{"version":3,"file":"cache.service.js","sourceRoot":"","sources":["../src/cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { _throw } from 'rxjs/observable/throw';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { share } from 'rxjs/operators/share';\nimport { map } from 'rxjs/operators/map';\nimport { catchError } from 'rxjs/operators/catchError';\nimport { defer } from 'rxjs/observable/defer';\nimport { CacheStorageService, StorageCacheItem } from './cache-storage';\n\nexport interface CacheConfig {\n  keyPrefix?: string;\n}\n\nexport const MESSAGES = {\n  0: 'Cache initialization error: ',\n  1: 'Cache is not enabled.',\n  2: 'Cache entry already expired: ',\n  3: 'No such key: ',\n  4: 'No entries were deleted, because browser is offline.'\n};\n\nexport type CacheValueFactory<T> = () => Promise<T>;\n\n@Injectable()\nexport class CacheService {\n  private ttl: number = 60 * 60; // one hour\n  private cacheEnabled: boolean = true;\n  private invalidateOffline: boolean = false;\n  private networkStatusChanges: Observable<boolean>;\n  private networkStatus: boolean = true;\n  static request: any;\n  static response: any;\n  static responseOptions: any;\n  static httpDeprecated: boolean = false;\n\n  constructor(\n    private _storage: CacheStorageService\n  ) {\n    this.loadHttp();\n    this.watchNetworkInit();\n    this.loadCache();\n  }\n\n  private async loadCache() {\n    try {\n      await this._storage.ready();\n      this.cacheEnabled = true;\n    } catch (e) {\n      this.cacheEnabled = false;\n      console.error(MESSAGES[0], e);\n    }\n  }\n\n  private async loadHttp() {\n    if (CacheService.request && CacheService.response) {\n      return;\n    }\n\n    let http;\n    // try load @angular/http deprecated or @angular/common/http\n    try {\n      http = await import('@angular/http');\n      CacheService.httpDeprecated = true;\n    } catch (e) {\n      http = await import('@angular/common/http');\n    }\n    CacheService.request = http.Request || http.HttpRequest;\n    CacheService.response = http.Response || http.HttpResponse;\n    CacheService.responseOptions = http.ResponseOptions;\n  }\n\n  async ready(): Promise<any> {\n    await this._storage.ready();\n  }\n\n  /**\n   * @description Disable or enable cache\n   */\n  enableCache(enable: boolean = true) {\n    this.cacheEnabled = enable;\n  }\n\n  /**\n   * @description Delete DB table and create new one\n   * @return {Promise<any>}\n   */\n  private async resetDatabase(): Promise<any> {\n    await this.ready();\n\n    let items = await this._storage.all();\n    return Promise.all(\n      items\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Set default TTL\n   * @param {number} ttl - TTL in seconds\n   */\n  setDefaultTTL(ttl: number): number {\n    return (this.ttl = ttl);\n  }\n\n  /**\n   * @description Set if expired cache should be invalidated if device is offline\n   * @param {boolean} offlineInvalidate\n   */\n  setOfflineInvalidate(offlineInvalidate: boolean) {\n    this.invalidateOffline = !offlineInvalidate;\n  }\n\n  /**\n   * @description Start watching if devices is online or offline\n   */\n  private watchNetworkInit() {\n    this.networkStatus = navigator.onLine;\n    const connect = fromEvent(window, 'online').pipe(map(() => true)),\n      disconnect = fromEvent(window, 'offline').pipe(map(() => false));\n\n    this.networkStatusChanges = merge(connect, disconnect).pipe(share());\n    this.networkStatusChanges.subscribe(status => {\n      this.networkStatus = status;\n    });\n  }\n\n  /**\n   * @description Stream of network status changes\n   * * @return {Observable<boolean>} network status stream\n   */\n  getNetworkStatusChanges() {\n    return this.networkStatusChanges;\n  }\n\n  /**\n   * @description Check if devices is online\n   * @return {boolean} network status\n   */\n  isOnline() {\n    return this.networkStatus;\n  }\n\n  /**\n   * @description Save item to cache\n   * @param {string} key - Unique key\n   * @param {any} data - Data to store\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Promise<any>} - saved data\n   */\n  saveItem(\n    key: string,\n    data: any,\n    groupKey: string = 'none',\n    ttl: number = this.ttl\n  ): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    const expires = new Date().getTime() + ttl * 1000,\n      type = CacheService.isRequest(data) ? 'request' : typeof data,\n      value = JSON.stringify(data);\n\n    return this._storage.set(key, {\n      value,\n      expires,\n      type,\n      groupKey\n    });\n  }\n\n  /**\n   * @description Delete item from cache\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - query execution promise\n   */\n  removeItem(key: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.remove(key);\n  }\n\n  /**\n   * @description Removes all items with a key that matches pattern\n   * @return {Promise<any>}\n   */\n  async removeItems(pattern: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let regex = new RegExp(`^${pattern.split('*').join('.*')}$`);\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .map(item => item.key)\n      .filter(key => key && regex.test(key))\n      .map(key => this.removeItem(key))\n    );\n  }\n\n  /**\n   * @description Get item from cache without expire check etc.\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getRawItem<T = any>(key: string): Promise<StorageCacheItem> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    try {\n      let data = await this._storage.get(key);\n      if (!!data) {\n        return data;\n      }\n\n      throw new Error('');\n    } catch (err) {\n      throw new Error(MESSAGES[3] + key);\n    }\n  }\n\n  async getRawItems() {\n    return this._storage.all();\n  }\n\n  /**\n   * @description Check if item exists in cache regardless if expired or not\n   * @param {string} key - Unique key\n   * @return {Promise<boolean | string>} - boolean - true if exists\n   */\n  async itemExists(key: string): Promise<boolean | string> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.exists(key);\n  }\n\n  /**\n   * @description Get item from cache with expire check and correct type assign\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getItem<T = any>(key: string): Promise<T> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let data = await this.getRawItem(key);\n\n    if (data.expires < new Date().getTime() && (this.invalidateOffline || this.isOnline())) {\n      throw new Error(MESSAGES[2] + key);\n    }\n\n    return CacheService.decodeRawData(data);\n  }\n\n  async getOrSetItem<T>(\n    key: string,\n    factory: CacheValueFactory<T>,\n    groupKey?: string,\n    ttl?: number\n  ): Promise<T> {\n    let val: T;\n\n    try {\n      val = await this.getItem<T>(key);\n    } catch (error) {\n      val = await factory();\n      await this.saveItem(key, val, groupKey, ttl);\n    }\n\n    return val;\n  }\n\n  /**\n   * @description Decode raw data from DB\n   * @param {any} data - Data\n   * @return {any} - decoded data\n   */\n  static decodeRawData(data: StorageCacheItem): any {\n    let dataJson = JSON.parse(data.value);\n    if (CacheService.isRequest(dataJson)) {\n      let response: any = {\n        body: dataJson._body || dataJson.body,\n        status: dataJson.status,\n        headers: dataJson.headers,\n        statusText: dataJson.statusText,\n        url: dataJson.url\n      };\n\n      if (CacheService.responseOptions) {\n        response.type = dataJson.type;\n        response = new CacheService.responseOptions(response);\n      }\n\n      return new CacheService.response(response);\n    }\n\n    return dataJson;\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromObservable<T = any>(\n    key: string,\n    observable: any,\n    groupKey?: string,\n    ttl?: number\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    observable = observable.pipe(share());\n\n    return defer(() => {\n      return fromPromise(this.getItem(key)).pipe(\n        catchError(e => {\n          observable.subscribe(\n            res => {\n              return this.saveItem(key, res, groupKey, ttl);\n            },\n            error => {\n              return _throw(error);\n            }\n          );\n\n          return observable;\n        })\n      );\n    });\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @param {string} [delayType='expired']\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromDelayedObservable<T = any>(\n    key: string,\n    observable: Observable<T>,\n    groupKey?: string,\n    ttl: number = this.ttl,\n    delayType: string = 'expired'\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    const observableSubject = new Subject<T>();\n    observable = observable.pipe(share());\n\n    const subscribeOrigin = () => {\n      observable.subscribe(\n        res => {\n          this.saveItem(key, res, groupKey, ttl);\n          observableSubject.next(res);\n          observableSubject.complete();\n        },\n        err => {\n          observableSubject.error(err);\n        },\n        () => {\n          observableSubject.complete();\n        }\n      );\n    };\n\n    this.getItem<T>(key)\n      .then(data => {\n        observableSubject.next(data);\n\n        if (delayType === 'all') {\n          subscribeOrigin();\n        } else {\n          observableSubject.complete();\n        }\n      })\n      .catch(e => {\n        this.getRawItem<T>(key)\n          .then(res => {\n            observableSubject.next(CacheService.decodeRawData(res));\n            subscribeOrigin();\n          })\n          .catch(() => subscribeOrigin());\n      });\n\n    return observableSubject.asObservable();\n  }\n\n  /**\n   * Perform complete cache clear\n   * @return {Promise<any>}\n   */\n  clearAll(): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    return this.resetDatabase();\n  }\n\n  /**\n   * @description Remove all expired items from cache\n   * @param {boolean} ignoreOnlineStatus -\n   * @return {Promise<any>} - query promise\n   */\n  async clearExpired(ignoreOnlineStatus = false): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    if (!this.isOnline() && !ignoreOnlineStatus) {\n      throw new Error(MESSAGES[4]);\n    }\n\n    let items = await this._storage.all();\n    let datetime = new Date().getTime();\n\n    return Promise.all(\n      items\n      .filter(item => item.expires < datetime)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Remove all item with specified group\n   * @param {string} groupKey - group key\n   * @return {Promise<any>} - query promise\n   */\n  async clearGroup(groupKey: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .filter(item => item.groupKey === groupKey)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Check if it's an request\n   * @param {any} data - Variable to test\n   * @return {boolean} - data from cache\n   */\n  static isRequest(data: any): boolean {\n    let orCondition =\n      data &&\n      typeof data === 'object' &&\n      data.hasOwnProperty('status') &&\n      data.hasOwnProperty('statusText') &&\n      data.hasOwnProperty('headers') &&\n      data.hasOwnProperty('url');\n\n    if (CacheService.httpDeprecated) {\n      orCondition =\n        orCondition &&\n        data.hasOwnProperty('type') &&\n        data.hasOwnProperty('_body');\n    } else {\n      orCondition = orCondition && data.hasOwnProperty('body');\n    }\n\n    return data && ((CacheService.request && data instanceof CacheService.request) || orCondition);\n  }\n}\n"]}