import { __extends } from "tslib";
import { WebPlugin } from '@capacitor/core';
var _a = require('electron'), remote = _a.remote, shell = _a.shell;
var AppPluginElectron = /** @class */ (function (_super) {
    __extends(AppPluginElectron, _super);
    function AppPluginElectron() {
        return _super.call(this, {
            name: 'App',
            platforms: ['electron']
        }) || this;
    }
    AppPluginElectron.prototype.exitApp = function () {
        var w = remote.getCurrentWindow();
        w && w.close();
        throw new Error('App quit');
    };
    AppPluginElectron.prototype.canOpenUrl = function (_options) {
        return Promise.resolve({ value: true });
    };
    AppPluginElectron.prototype.openUrl = function (options) {
        shell.openExternal(options.url);
        return Promise.resolve({ completed: true });
    };
    AppPluginElectron.prototype.getLaunchUrl = function () {
        throw new Error('Method not implemented.');
    };
    return AppPluginElectron;
}(WebPlugin));
export { AppPluginElectron };
var App = new AppPluginElectron();
export { App };
//# sourceMappingURL=app.js.map