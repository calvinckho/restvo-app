var toArray = require('data-uri-to-u8');
var rotate = require('rotate-component');
var resize = require('./lib/resize');
var urlToImage = require('./lib/url-to-image');
var size = {
    'image/png': require('png-size'),
    'image/jpeg': require('jpeg-size')
};

module.exports = fixOrientation;

function fixOrientation (image) {
    return new Promise(resolve => {
        // if exif info exists and portrait orientation has not been corrected yet
        if (image.hasOwnProperty('exif') && image.exif.Orientation && image.exif.Orientation !== '1') {
            var url = image.dataUrl;
            var buf = toArray(url);
            var s = size[buf.type](buf);
            var max = Math.max(s.width, s.height);
            var half = max / 2;
            var dir = { 3: 2, 6: 1, 8: -1 }[parseInt(image.exif.Orientation)];

            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            canvas.width = canvas.height = max;

            rotate(ctx, { x: half, y: half, degrees: dir * 90 });

            urlToImage(url, function (img) {
                if (dir === 1 || dir === 2) {
                    ctx.drawImage(img, 0, max - s.height);
                } else {
                    ctx.drawImage(img, max - s.width, 0);
                }

                rotate(ctx, { x: half, y: half, degrees: -1 * dir * 90 });
                resize(canvas, {
                    width: dir === 2 ? s.width : s.height,
                    height: dir === 2 ? s.height : s.width
                });

                var fixed = buf.type === 'image/png'
                    ? canvas.toDataURL()
                    : canvas.toDataURL('image/jpeg', 1);
                resolve(fixed);
            });
        } else {
            resolve(image.dataUrl);
        }
    });
}